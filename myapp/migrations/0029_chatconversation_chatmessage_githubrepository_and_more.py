# Generated by Django 5.2.4 on 2025-08-08 09:20

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('myapp', '0028_alter_resume_options_resume_updated_at_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('user', 'User'), ('assistant', 'Assistant'), ('system', 'System')], max_length=10)),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='GitHubRepository',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repo_url', models.URLField()),
                ('repo_owner', models.CharField(max_length=100)),
                ('repo_name', models.CharField(max_length=100)),
                ('last_commit_hash', models.CharField(blank=True, max_length=40)),
                ('commit_count', models.IntegerField(default=0)),
                ('contributors', models.JSONField(default=list)),
                ('languages', models.JSONField(default=dict)),
                ('verified_at', models.DateTimeField(auto_now=True)),
                ('is_verified', models.BooleanField(default=False)),
            ],
            options={
                'permissions': [('manage_github_repo', 'Can manage GitHub repository as creator')],
            },
        ),
        migrations.CreateModel(
            name='HackathonSubmissionFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='hackathon_files/%Y/%m/%d/')),
                ('file_type', models.CharField(choices=[('source', 'Source Code'), ('documentation', 'Documentation'), ('presentation', 'Presentation'), ('demo', 'Demo Video'), ('other', 'Other')], max_length=20)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('file_size', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'permissions': [('manage_submission_file', 'Can manage submission file as creator')],
            },
        ),
        migrations.CreateModel(
            name='ModuleVisit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_visited', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_title', models.CharField(max_length=200)),
                ('project_description', models.TextField()),
                ('submission_date', models.DateTimeField(auto_now_add=True)),
                ('github_link', models.URLField(blank=True, null=True)),
                ('demo_link', models.URLField(blank=True, null=True)),
                ('submission_file', models.FileField(blank=True, null=True, upload_to='hackathon_submissions/')),
                ('presentation_file', models.FileField(blank=True, null=True, upload_to='hackathon_presentations/')),
                ('evaluation_status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('error', 'Error')], default='pending', max_length=20)),
                ('ai_evaluation_notes', models.TextField(blank=True, null=True)),
                ('ai_evaluation_score', models.IntegerField(blank=True, null=True)),
                ('innovation_score', models.FloatField(blank=True, null=True)),
                ('feasibility_score', models.FloatField(blank=True, null=True)),
                ('impact_score', models.FloatField(blank=True, null=True)),
                ('final_score', models.FloatField(blank=True, null=True)),
            ],
            options={
                'permissions': [('manage_submission', 'Can manage submission as creator')],
            },
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hints_used', models.IntegerField(default=0)),
                ('stuck_count', models.IntegerField(default=0)),
                ('last_hint_time', models.DateTimeField(blank=True, null=True)),
                ('approaches_discussed', models.JSONField(blank=True, default=list)),
            ],
        ),
        migrations.CreateModel(
            name='XPRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problem_id', models.CharField(max_length=100)),
                ('xp', models.PositiveIntegerField(default=0)),
                ('earned_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.RemoveField(
            model_name='quizresult',
            name='quiz',
        ),
        migrations.RemoveField(
            model_name='quizquestion',
            name='quiz',
        ),
        migrations.RemoveField(
            model_name='quizoption',
            name='question',
        ),
        migrations.AlterModelOptions(
            name='hackathon',
            options={'ordering': ['-start_date'], 'permissions': [('manage_hackathon', 'Can manage hackathon as creator'), ('view_all_hackathons', 'Can view all hackathons')]},
        ),
        migrations.AlterModelOptions(
            name='hackathonevaluation',
            options={'permissions': [('manage_evaluation', 'Can manage evaluation as creator')]},
        ),
        migrations.AlterModelOptions(
            name='hackathonregistration',
            options={'permissions': [('manage_registration', 'Can manage registration as creator')]},
        ),
        migrations.AlterModelOptions(
            name='hackathonsubmission',
            options={'ordering': ['-final_score', '-submitted_at'], 'permissions': [('manage_submission', 'Can manage submission as creator'), ('evaluate_submission', 'Can evaluate submission')]},
        ),
        migrations.AlterModelOptions(
            name='hackathonteam',
            options={'permissions': [('manage_team', 'Can manage team as creator')]},
        ),
        migrations.RemoveField(
            model_name='codingproblem',
            name='acceptance_rate',
        ),
        migrations.AddField(
            model_name='codingproblem',
            name='function_name',
            field=models.CharField(default='solution', max_length=100),
        ),
        migrations.AddField(
            model_name='codingproblem',
            name='function_params',
            field=models.JSONField(default=list),
        ),
        migrations.AddField(
            model_name='codingproblem',
            name='return_type',
            field=models.CharField(default='List[int]', max_length=100),
        ),
        migrations.AddField(
            model_name='hackathon',
            name='allow_late_submission',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='hackathon',
            name='allowed_file_types',
            field=models.JSONField(default=list),
        ),
        migrations.AddField(
            model_name='hackathon',
            name='auto_evaluation',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='hackathon',
            name='discord_webhook',
            field=models.URLField(blank=True),
        ),
        migrations.AddField(
            model_name='hackathon',
            name='github_org',
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AddField(
            model_name='hackathon',
            name='judging_criteria_weights',
            field=models.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name='hackathon',
            name='max_file_size_mb',
            field=models.PositiveIntegerField(default=50),
        ),
        migrations.AddField(
            model_name='hackathon',
            name='slack_webhook',
            field=models.URLField(blank=True),
        ),
        migrations.AddField(
            model_name='hackathon',
            name='submission_guidelines',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='hackathonevaluation',
            name='recommendation',
            field=models.CharField(blank=True, choices=[('highly_recommended', 'Highly Recommended'), ('recommended', 'Recommended'), ('average', 'Average'), ('needs_improvement', 'Needs Improvement'), ('not_recommended', 'Not Recommended')], max_length=50),
        ),
        migrations.AddField(
            model_name='hackathonregistration',
            name='emergency_contact',
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AddField(
            model_name='hackathonregistration',
            name='skills',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='hackathonsubmission',
            name='ai_evaluation_notes',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='hackathonsubmission',
            name='ai_evaluation_score',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='hackathonsubmission',
            name='ai_evaluation_triggered',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='hackathonsubmission',
            name='code_quality_score',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='hackathonsubmission',
            name='evaluation_status',
            field=models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('error', 'Error')], default='pending', max_length=20),
        ),
        migrations.AddField(
            model_name='hackathonsubmission',
            name='feasibility_score',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='hackathonsubmission',
            name='impact_score',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='hackathonsubmission',
            name='innovation_score',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='hackathonsubmission',
            name='live_demo_url',
            field=models.URLField(blank=True),
        ),
        migrations.AddField(
            model_name='hackathonsubmission',
            name='plagiarism_score',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='hackathonsubmission',
            name='presentation_file',
            field=models.FileField(blank=True, null=True, upload_to='presentations/'),
        ),
        migrations.AddField(
            model_name='hackathonsubmission',
            name='submission_metadata',
            field=models.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name='hackathonsubmission',
            name='video_demo_url',
            field=models.URLField(blank=True),
        ),
        migrations.AlterField(
            model_name='hackathon',
            name='evaluation_criteria',
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='hackathon',
            name='status',
            field=models.CharField(choices=[('upcoming', 'Upcoming'), ('registration_open', 'Registration Open'), ('waiting', 'Waiting to Start'), ('in_progress', 'In Progress'), ('evaluation', 'Under Evaluation'), ('completed', 'Completed')], default='upcoming', max_length=20),
        ),
        migrations.AlterField(
            model_name='hackathonsubmission',
            name='hackathon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_uploaded_submissions', to='myapp.hackathon'),
        ),
        migrations.AlterUniqueTogether(
            name='hackathonsubmission',
            unique_together={('hackathon', 'individual_user'), ('hackathon', 'team')},
        ),
        migrations.AddIndex(
            model_name='codesubmission',
            index=models.Index(fields=['user', 'submitted_at'], name='myapp_codes_user_id_55db13_idx'),
        ),
        migrations.AddIndex(
            model_name='codesubmission',
            index=models.Index(fields=['problem', 'status'], name='myapp_codes_problem_8f29e1_idx'),
        ),
        migrations.AddIndex(
            model_name='codingproblem',
            index=models.Index(fields=['difficulty', 'is_active'], name='myapp_codin_difficu_420361_idx'),
        ),
        migrations.AddIndex(
            model_name='hackathonregistration',
            index=models.Index(fields=['user', 'is_active'], name='myapp_hacka_user_id_c5dc30_idx'),
        ),
        migrations.AddIndex(
            model_name='hackathonsubmission',
            index=models.Index(fields=['team'], name='myapp_hacka_team_id_2464f4_idx'),
        ),
        migrations.AddIndex(
            model_name='hackathonsubmission',
            index=models.Index(fields=['individual_user'], name='myapp_hacka_individ_b0247a_idx'),
        ),
        migrations.AddIndex(
            model_name='hackathonteam',
            index=models.Index(fields=['invite_code'], name='myapp_hacka_invite__7bf12d_idx'),
        ),
        migrations.AddConstraint(
            model_name='hackathonsubmission',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('individual_user__isnull', True), ('team__isnull', False)), models.Q(('individual_user__isnull', False), ('team__isnull', True)), _connector='OR'), name='either_team_or_individual'),
        ),
        migrations.AddField(
            model_name='chatconversation',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.codingproblem'),
        ),
        migrations.AddField(
            model_name='chatconversation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='chatmessage',
            name='conversation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='myapp.chatconversation'),
        ),
        migrations.AddField(
            model_name='githubrepository',
            name='submission',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='github_repository', to='myapp.hackathonsubmission'),
        ),
        migrations.AddField(
            model_name='hackathonsubmissionfile',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='myapp.hackathonsubmission'),
        ),
        migrations.AddField(
            model_name='modulevisit',
            name='module',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.module'),
        ),
        migrations.AddField(
            model_name='modulevisit',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='submission',
            name='hackathon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_project_submissions', to='myapp.hackathon'),
        ),
        migrations.AddField(
            model_name='submission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userprogress',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.codingproblem'),
        ),
        migrations.AddField(
            model_name='userprogress',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='xprecord',
            name='user_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='xp_records', to='myapp.userprofile'),
        ),
        migrations.DeleteModel(
            name='QuizResult',
        ),
        migrations.DeleteModel(
            name='Quiz',
        ),
        migrations.DeleteModel(
            name='QuizOption',
        ),
        migrations.DeleteModel(
            name='QuizQuestion',
        ),
        migrations.AlterUniqueTogether(
            name='chatconversation',
            unique_together={('user', 'problem')},
        ),
        migrations.AlterUniqueTogether(
            name='modulevisit',
            unique_together={('user', 'module')},
        ),
        migrations.AlterUniqueTogether(
            name='userprogress',
            unique_together={('user', 'problem')},
        ),
        migrations.AlterUniqueTogether(
            name='xprecord',
            unique_together={('user_profile', 'problem_id')},
        ),
    ]
